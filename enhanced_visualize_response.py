"""
Enhanced Visualization of Mycoplasma Genitalium Response to Osmotic Pressure

This script creates enhanced visualizations of the Mycoplasma genitalium cell structure
before and after exposure to osmotic pressure, using the data generated by
the osmotic stress prediction model with 3D structural data.
"""

import os
import sys
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.colors as mcolors
import matplotlib.cm as cm
import matplotlib.patches as mpatches
import torch
from torch_geometric.data import Data

# Set paths
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_DIR = os.path.join(BASE_DIR, "data")
MODELS_DIR = os.path.join(BASE_DIR, "models")
OUTPUT_DIR = os.path.join(BASE_DIR, "visualizations")

# Create directories if they don't exist
os.makedirs(OUTPUT_DIR, exist_ok=True)

def load_data():
    """
    Load the position and node data from the saved files.
    
    Returns:
        tuple: (positions_before, positions_after, edges, node_types, node_expressions)
    """
    # Load positions before osmotic stress
    positions_before = []
    with open(os.path.join(OUTPUT_DIR, "positions_before.txt"), 'r') as f:
        lines = f.readlines()[1:]  # Skip header
        for line in lines:
            x, y, z = line.strip().split(',')
            positions_before.append([float(x), float(y), float(z)])
    
    # Load positions after osmotic stress
    positions_after = []
    with open(os.path.join(OUTPUT_DIR, "positions_after.txt"), 'r') as f:
        lines = f.readlines()[1:]  # Skip header
        for line in lines:
            x, y, z = line.strip().split(',')
            positions_after.append([float(x), float(y), float(z)])
    
    # Load edges
    edges = []
    with open(os.path.join(OUTPUT_DIR, "edges.txt"), 'r') as f:
        lines = f.readlines()[1:]  # Skip header
        for line in lines:
            source, target = line.strip().split(',')
            edges.append([int(source), int(target)])
    
    # Load node types
    node_types = {}
    node_expressions = {}
    with open(os.path.join(OUTPUT_DIR, "node_types.txt"), 'r') as f:
        lines = f.readlines()[1:]  # Skip header
        for line in lines:
            parts = line.strip().split(',')
            if len(parts) >= 4:  # Make sure we have all expected columns
                node, gene, is_membrane, expression = parts
                node_types[int(node)] = {
                    'gene': gene,
                    'is_membrane': is_membrane == '1'
                }
                node_expressions[int(node)] = float(expression)
    
    # Load position changes
    position_changes = {}
    with open(os.path.join(OUTPUT_DIR, "position_changes.txt"), 'r') as f:
        lines = f.readlines()[1:]  # Skip header
        for line in lines:
            parts = line.strip().split(',')
            if len(parts) >= 3:  # Make sure we have at least node, gene, change
                node, gene, change = parts[:3]
                position_changes[int(node)] = float(change)
    
    return positions_before, positions_after, edges, node_types, node_expressions, position_changes

def load_graph_data():
    """
    Load the graph data directly from the saved PyTorch files.
    
    Returns:
        tuple: (original_graph, updated_graph)
    """
    try:
        # Load original graph data
        original_graph = torch.load(os.path.join(DATA_DIR, "cell_graph_real_data.pt"))
        
        # Load updated graph data after osmotic stress
        updated_graph = torch.load(os.path.join(DATA_DIR, "cell_graph_after_osmotic_stress.pt"))
        
        return original_graph, updated_graph
    except Exception as e:
        print(f"Error loading graph data: {e}")
        return None, None

def create_3d_visualization(positions_before, positions_after, edges, node_types, node_expressions):
    """
    Create enhanced 3D visualizations of the cell structure before and after osmotic stress.
    
    Args:
        positions_before (list): List of 3D positions before osmotic stress
        positions_after (list): List of 3D positions after osmotic stress
        edges (list): List of edges between nodes
        node_types (dict): Dictionary mapping node indices to their types
        node_expressions (dict): Dictionary mapping node indices to their expression values
    """
    # Create figure
    fig = plt.figure(figsize=(20, 10))
    
    # Before osmotic stress
    ax1 = fig.add_subplot(121, projection='3d')
    
    # Color nodes based on expression values
    norm = plt.Normalize(min(node_expressions.values()), max(node_expressions.values()))
    cmap = plt.cm.coolwarm
    
    # Create color arrays
    colors_before = []
    sizes_before = []
    
    for i in range(len(positions_before)):
        # Color based on expression (red for upregulated, blue for downregulated)
        colors_before.append(cmap(norm(node_expressions[i])))
        
        # Size based on whether it's a membrane protein
        sizes_before.append(50 if node_types[i]['is_membrane'] else 20)
    
    # Plot nodes
    scatter1 = ax1.scatter(
        [p[0] for p in positions_before],
        [p[1] for p in positions_before],
        [p[2] for p in positions_before],
        c=colors_before,
        s=sizes_before,
        alpha=0.7
    )
    
    # Plot edges (only a subset for clarity)
    edge_subset = edges[:len(edges)//20]  # Use 5% of edges
    for edge in edge_subset:
        ax1.plot(
            [positions_before[edge[0]][0], positions_before[edge[1]][0]],
            [positions_before[edge[0]][1], positions_before[edge[1]][1]],
            [positions_before[edge[0]][2], positions_before[edge[1]][2]],
            'k-',
            alpha=0.1
        )
    
    ax1.set_title('Before Osmotic Stress', fontsize=16)
    ax1.set_xlabel('X', fontsize=12)
    ax1.set_ylabel('Y', fontsize=12)
    ax1.set_zlabel('Z', fontsize=12)
    
    # After osmotic stress
    ax2 = fig.add_subplot(122, projection='3d')
    
    # Create color arrays for after stress
    colors_after = colors_before.copy()  # Same colors as before
    sizes_after = sizes_before.copy()    # Same sizes as before
    
    # Plot nodes
    scatter2 = ax2.scatter(
        [p[0] for p in positions_after],
        [p[1] for p in positions_after],
        [p[2] for p in positions_after],
        c=colors_after,
        s=sizes_after,
        alpha=0.7
    )
    
    # Plot edges (only a subset for clarity)
    for edge in edge_subset:
        ax2.plot(
            [positions_after[edge[0]][0], positions_after[edge[1]][0]],
            [positions_after[edge[0]][1], positions_after[edge[1]][1]],
            [positions_after[edge[0]][2], positions_after[edge[1]][2]],
            'k-',
            alpha=0.1
        )
    
    ax2.set_title('After Osmotic Stress', fontsize=16)
    ax2.set_xlabel('X', fontsize=12)
    ax2.set_ylabel('Y', fontsize=12)
    ax2.set_zlabel('Z', fontsize=12)
    
    # Add colorbar for expression values
    cbar = plt.colorbar(cm.ScalarMappable(norm=norm, cmap=cmap), ax=[ax1, ax2], 
                        orientation='horizontal', pad=0.05, aspect=40, shrink=0.8)
    cbar.set_label('Gene Expression Change (log2 fold change)', fontsize=14)
    
    # Add legend for membrane vs non-membrane
    big_dot = plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='gray', markersize=12, label='Membrane Protein')
    small_dot = plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='gray', markersize=8, label='Non-membrane Protein')
    fig.legend(handles=[big_dot, small_dot], loc='lower center', ncol=2, fontsize=12)
    
    plt.suptitle('Mycoplasma genitalium Cell Response to Osmotic Stress', fontsize=18)
    plt.tight_layout()
    plt.savefig(os.path.join(OUTPUT_DIR, "cell_response_3d_enhanced.png"), dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"Enhanced 3D visualization saved to {os.path.join(OUTPUT_DIR, 'cell_response_3d_enhanced.png')}")

def create_2d_visualization(positions_before, positions_after, edges, node_types, node_expressions):
    """
    Create enhanced 2D visualizations of the cell structure before and after osmotic stress.
    
    Args:
        positions_before (list): List of 3D positions before osmotic stress
        positions_after (list): List of 3D positions after osmotic stress
        edges (list): List of edges between nodes
        node_types (dict): Dictionary mapping node indices to their types
        node_expressions (dict): Dictionary mapping node indices to their expression values
    """
    # Create figure for top view (x-y plane)
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))
    
    # Color nodes based on expression values
    norm = plt.Normalize(min(node_expressions.values()), max(node_expressions.values()))
    cmap = plt.cm.coolwarm
    
    # Create color arrays
    colors = []
    sizes = []
    
    for i in range(len(positions_before)):
        # Color based on expression (red for upregulated, blue for downregulated)
        colors.append(cmap(norm(node_expressions[i])))
        
        # Size based on whether it's a membrane protein
        sizes.append(100 if node_types[i]['is_membrane'] else 40)
    
    # Before osmotic stress - top view (x-y plane)
    scatter1 = ax1.scatter(
        [p[0] for p in positions_before],
        [p[1] for p in positions_before],
        c=colors,
        s=sizes,
        alpha=0.7
    )
    
    # Plot edges (only a subset for clarity)
    edge_subset = edges[:len(edges)//20]  # Use 5% of edges
    for edge in edge_subset:
        ax1.plot(
            [positions_before[edge[0]][0], positions_before[edge[1]][0]],
            [positions_before[edge[0]][1], positions_before[edge[1]][1]],
            'k-',
            alpha=0.1
        )
    
    ax1.set_title('Before Osmotic Stress (Top View)', fontsize=16)
    ax1.set_xlabel('X', fontsize=12)
    ax1.set_ylabel('Y', fontsize=12)
    
    # After osmotic stress - top view (x-y plane)
    scatter2 = ax2.scatter(
        [p[0] for p in positions_after],
        [p[1] for p in positions_after],
        c=colors,
        s=sizes,
        alpha=0.7
    )
    
    # Plot edges (only a subset for clarity)
    for edge in edge_subset:
        ax2.plot(
            [positions_after[edge[0]][0], positions_after[edge[1]][0]],
            [positions_after[edge[0]][1], positions_after[edge[1]][1]],
            'k-',
            alpha=0.1
        )
    
    ax2.set_title('After Osmotic Stress (Top View)', fontsize=16)
    ax2.set_xlabel('X', fontsize=12)
    ax2.set_ylabel('Y', fontsize=12)
    
    # Add colorbar for expression values
    cbar = plt.colorbar(cm.ScalarMappable(norm=norm, cmap=cmap), ax=[ax1, ax2], 
                        orientation='horizontal', pad=0.05, aspect=40, shrink=0.8)
    cbar.set_label('Gene Expression Change (log2 fold change)', fontsize=14)
    
    # Add legend for membrane vs non-membrane
    big_dot = plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='gray', markersize=12, label='Membrane Protein')
    small_dot = plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='gray', markersize=8, label='Non-membrane Protein')
    fig.legend(handles=[big_dot, small_dot], loc='lower center', ncol=2, fontsize=12)
    
    plt.suptitle('Mycoplasma genitalium Cell Response to Osmotic Stress (Top View)', fontsize=18)
    plt.tight_layout()
    plt.savefig(os.path.join(OUTPUT_DIR, "cell_response_2d_enhanced.png"), dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"Enhanced 2D visualization saved to {os.path.join(OUTPUT_DIR, 'cell_response_2d_enhanced.png')}")
    
    # Create figure for side view (x-z plane)
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))
    
    # Before osmotic stress - side view (x-z plane)
    scatter1 = ax1.scatter(
        [p[0] for p in positions_before],
        [p[2] for p in positions_before],
        c=colors,
        s=sizes,
        alpha=0.7
    )
    
    # Plot edges (only a subset for clarity)
    for edge in edge_subset:
        ax1.plot(
            [positions_before[edge[0]][0], positions_before[edge[1]][0]],
            [positions_before[edge[0]][2], positions_before[edge[1]][2]],
            'k-',
            alpha=0.1
        )
    
    ax1.set_title('Before Osmotic Stress (Side View)', fontsize=16)
    ax1.set_xlabel('X', fontsize=12)
    ax1.set_ylabel('Z', fontsize=12)
    
    # After osmotic stress - side view (x-z plane)
    scatter2 = ax2.scatter(
        [p[0] for p in positions_after],
        [p[2] for p in positions_after],
        c=colors,
        s=sizes,
        alpha=0.7
    )
    
    # Plot edges (only a subset for clarity)
    for edge in edge_subset:
        ax2.plot(
            [positions_after[edge[0]][0], positions_after[edge[1]][0]],
            [positions_after[edge[0]][2], positions_after[edge[1]][2]],
            'k-',
            alpha=0.1
        )
    
    ax2.set_title('After Osmotic Stress (Side View)', fontsize=16)
    ax2.set_xlabel('X', fontsize=12)
    ax2.set_ylabel('Z', fontsize=12)
    
    # Add colorbar for expression values
    cbar = plt.colorbar(cm.ScalarMappable(norm=norm, cmap=cmap), ax=[ax1, ax2], 
                        orientation='horizontal', pad=0.05, aspect=40, shrink=0.8)
    cbar.set_label('Gene Expression Change (log2 fold change)', fontsize=14)
    
    # Add legend for membrane vs non-membrane
    big_dot = plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='gray', markersize=12, label='Membrane Protein')
    small_dot = plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='gray', markersize=8, label='Non-membrane Protein')
    fig.legend(handles=[big_dot, small_dot], loc='lower center', ncol=2, fontsize=12)
    
    plt.suptitle('Mycoplasma genitalium Cell Response to Osmotic Stress (Side View)', fontsize=18)
    plt.tight_layout()
    plt.savefig(os.path.join(OUTPUT_DIR, "cell_response_side_view.png"), dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"Side view visualization saved to {os.path.join(OUTPUT_DIR, 'cell_response_side_view.png')}")

def create_displacement_visualization(positions_before, positions_after, node_types, node_expressions):
    """
    Create enhanced visualizations showing the displacement of nodes due to osmotic stress.
    
    Args:
        positions_before (list): List of 3D positions before osmotic stress
        positions_after (list): List of 3D positions after osmotic stress
        node_types (dict): Dictionary mapping node indices to their types
        node_expressions (dict): Dictionary mapping node indices to their expression values
    """
    # Calculate displacements
    displacements = []
    for i in range(len(positions_before)):
        dx = positions_after[i][0] - positions_before[i][0]
        dy = positions_after[i][1] - positions_before[i][1]
        dz = positions_after[i][2] - positions_before[i][2]
        displacement = (dx**2 + dy**2 + dz**2)**0.5
        displacements.append(displacement)
    
    # Separate membrane and non-membrane proteins
    membrane_displacements = []
    membrane_expressions = []
    non_membrane_displacements = []
    non_membrane_expressions = []
    
    for i in range(len(positions_before)):
        if node_types[i]['is_membrane']:
            membrane_displacements.append(displacements[i])
            membrane_expressions.append(node_expressions[i])
        else:
            non_membrane_displacements.append(displacements[i])
            non_membrane_expressions.append(node_expressions[i])
    
    # Create histogram
    fig, ax = plt.subplots(figsize=(12, 8))
    
    ax.hist(membrane_displacements, bins=20, alpha=0.7, label='Membrane Proteins', color='red')
    ax.hist(non_membrane_displacements, bins=20, alpha=0.7, label='Non-membrane Proteins', color='blue')
    
    ax.set_xlabel('Displacement Magnitude', fontsize=14)
    ax.set_ylabel('Count', fontsize=14)
    ax.set_title('Distribution of Node Displacements Due to Osmotic Stress', fontsize=16)
    ax.legend(fontsize=12)
    
    plt.tight_layout()
    plt.savefig(os.path.join(OUTPUT_DIR, "displacement_histogram_enhanced.png"), dpi=300)
    plt.close()
    
    print(f"Enhanced displacement histogram saved to {os.path.join(OUTPUT_DIR, 'displacement_histogram_enhanced.png')}")
    
    # Create scatter plot of expression vs displacement
    fig, ax = plt.subplots(figsize=(12, 8))
    
    # Scatter plot for membrane proteins
    ax.scatter(
        membrane_expressions,
        membrane_displacements,
        c='red',
        alpha=0.7,
        label='Membrane Proteins',
        s=80
    )
    
    # Scatter plot for non-membrane proteins
    ax.scatter(
        non_membrane_expressions,
        non_membrane_displacements,
        c='blue',
        alpha=0.7,
        label='Non-membrane Proteins',
        s=40
    )
    
    # Add trend lines
    if membrane_expressions:
        z_membrane = np.polyfit(membrane_expressions, membrane_displacements, 1)
        p_membrane = np.poly1d(z_membrane)
        x_membrane = np.linspace(min(membrane_expressions), max(membrane_expressions), 100)
        ax.plot(x_membrane, p_membrane(x_membrane), 'r--', linewidth=2)
    
    if non_membrane_expressions:
        z_non_membrane = np.polyfit(non_membrane_expressions, non_membrane_displacements, 1)
        p_non_membrane = np.poly1d(z_non_membrane)
        x_non_membrane = np.linspace(min(non_membrane_expressions), max(non_membrane_expressions), 100)
        ax.plot(x_non_membrane, p_non_membrane(x_non_membrane), 'b--', linewidth=2)
    
    ax.set_xlabel('Gene Expression Change (log2 fold change)', fontsize=14)
    ax.set_ylabel('Displacement Magnitude', fontsize=14)
    ax.set_title('Relationship Between Gene Expression and Displacement', fontsize=16)
    ax.legend(fontsize=12)
    ax.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig(os.path.join(OUTPUT_DIR, "expression_vs_displacement.png"), dpi=300)
    plt.close()
    
    print(f"Expression vs displacement plot saved to {os.path.join(OUTPUT_DIR, 'expression_vs_displacement.png')}")

def create_vector_field_visualization(positions_before, positions_after, node_types, node_expressions):
    """
    Create a vector field visualization showing the direction and magnitude of movement.
    
    Args:
        positions_before (list): List of 3D positions before osmotic stress
        positions_after (list): List of 3D positions after osmotic stress
        node_types (dict): Dictionary mapping node indices to their types
        node_expressions (dict): Dictionary mapping node indices to their expression values
    """
    # Calculate displacement vectors
    vectors = []
    for i in range(len(positions_before)):
        dx = positions_after[i][0] - positions_before[i][0]
        dy = positions_after[i][1] - positions_before[i][1]
        dz = positions_after[i][2] - positions_before[i][2]
        vectors.append([dx, dy, dz])
    
    # Create 3D vector field visualization
    fig = plt.figure(figsize=(15, 12))
    ax = fig.add_subplot(111, projection='3d')
    
    # Color based on expression
    norm = plt.Normalize(min(node_expressions.values()), max(node_expressions.values()))
    cmap = plt.cm.coolwarm
    
    # Plot vectors
    for i in range(len(positions_before)):
        x, y, z = positions_before[i]
        u, v, w = vectors[i]
        
        # Scale vectors for visibility
        magnitude = np.sqrt(u**2 + v**2 + w**2)
        scale_factor = 1.0  # Adjust as needed
        
        # Skip very small movements
        if magnitude < 0.01:
            continue
        
        # Color based on expression
        color = cmap(norm(node_expressions[i]))
        
        # Plot vector
        ax.quiver(x, y, z, u, v, w, color=color, length=scale_factor, 
                  arrow_length_ratio=0.3, alpha=0.7, linewidth=2)
    
    # Plot original positions
    membrane_indices = [i for i in range(len(positions_before)) if node_types[i]['is_membrane']]
    non_membrane_indices = [i for i in range(len(positions_before)) if not node_types[i]['is_membrane']]
    
    ax.scatter(
        [positions_before[i][0] for i in membrane_indices],
        [positions_before[i][1] for i in membrane_indices],
        [positions_before[i][2] for i in membrane_indices],
        c='red',
        s=30,
        alpha=0.3,
        label='Membrane Proteins'
    )
    
    ax.scatter(
        [positions_before[i][0] for i in non_membrane_indices],
        [positions_before[i][1] for i in non_membrane_indices],
        [positions_before[i][2] for i in non_membrane_indices],
        c='blue',
        s=15,
        alpha=0.3,
        label='Non-membrane Proteins'
    )
    
    ax.set_xlabel('X', fontsize=12)
    ax.set_ylabel('Y', fontsize=12)
    ax.set_zlabel('Z', fontsize=12)
    ax.set_title('Vector Field of Cell Movement Under Osmotic Stress', fontsize=16)
    ax.legend(fontsize=12)
    
    # Add colorbar
    cbar = plt.colorbar(cm.ScalarMappable(norm=norm, cmap=cmap), ax=ax, 
                        orientation='vertical', pad=0.05, aspect=40, shrink=0.8)
    cbar.set_label('Gene Expression Change (log2 fold change)', fontsize=12)
    
    plt.tight_layout()
    plt.savefig(os.path.join(OUTPUT_DIR, "vector_field_3d.png"), dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"3D vector field visualization saved to {os.path.join(OUTPUT_DIR, 'vector_field_3d.png')}")
    
    # Create 2D vector field visualization (top view)
    fig, ax = plt.subplots(figsize=(15, 12))
    
    # Plot vectors
    for i in range(len(positions_before)):
        x, y = positions_before[i][0], positions_before[i][1]
        u, v = vectors[i][0], vectors[i][1]
        
        # Scale vectors for visibility
        magnitude = np.sqrt(u**2 + v**2)
        scale_factor = 1.0  # Adjust as needed
        
        # Skip very small movements
        if magnitude < 0.01:
            continue
        
        # Color based on expression
        color = cmap(norm(node_expressions[i]))
        
        # Plot vector
        ax.quiver(x, y, u, v, color=color, scale=1/scale_factor, 
                  width=0.003, headwidth=3, alpha=0.7)
    
    # Plot original positions
    ax.scatter(
        [positions_before[i][0] for i in membrane_indices],
        [positions_before[i][1] for i in membrane_indices],
        c='red',
        s=50,
        alpha=0.3,
        label='Membrane Proteins'
    )
    
    ax.scatter(
        [positions_before[i][0] for i in non_membrane_indices],
        [positions_before[i][1] for i in non_membrane_indices],
        c='blue',
        s=20,
        alpha=0.3,
        label='Non-membrane Proteins'
    )
    
    ax.set_xlabel('X', fontsize=12)
    ax.set_ylabel('Y', fontsize=12)
    ax.set_title('Vector Field of Cell Movement Under Osmotic Stress (Top View)', fontsize=16)
    ax.legend(fontsize=12)
    ax.set_aspect('equal')
    
    # Add colorbar
    cbar = plt.colorbar(cm.ScalarMappable(norm=norm, cmap=cmap), ax=ax, 
                        orientation='vertical', pad=0.05, aspect=40, shrink=0.8)
    cbar.set_label('Gene Expression Change (log2 fold change)', fontsize=12)
    
    plt.tight_layout()
    plt.savefig(os.path.join(OUTPUT_DIR, "vector_field_2d.png"), dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"2D vector field visualization saved to {os.path.join(OUTPUT_DIR, 'vector_field_2d.png')}")

def run_model_and_generate_visualizations():
    """
    Run the osmotic stress model and generate visualizations.
    """
    try:
        # Run the osmotic stress model
        print("Running the osmotic stress prediction model...")
        os.system(f"python {os.path.join(BASE_DIR, 'osmotic_stress_model.py')}")
        
        # Load the data
        positions_before, positions_after, edges, node_types, node_expressions, position_changes = load_data()
        
        # Create visualizations
        create_3d_visualization(positions_before, positions_after, edges, node_types, node_expressions)
        create_2d_visualization(positions_before, positions_after, edges, node_types, node_expressions)
        create_displacement_visualization(positions_before, positions_after, node_types, node_expressions)
        create_vector_field_visualization(positions_before, positions_after, node_types, node_expressions)
        
        print("All visualizations generated successfully!")
        return True
    except Exception as e:
        print(f"Error generating visualizations: {e}")
        return False

def main():
    """Main function to create visualizations."""
    print("Creating enhanced visualizations of Mycoplasma genitalium response to osmotic pressure...")
    
    # Run model and generate visualizations
    success = run_model_and_generate_visualizations()
    
    if success:
        print("Visualization process completed successfully!")
    else:
        print("Visualization process encountered errors.")

if __name__ == "__main__":
    main()
